name: CI/CD Pipeline

on:
  push:
    branches: [main, feat/initial_files_CI_CD]
  pull_request:
    branches: [main]

permissions:
  contents: write
  security-events: write
  actions: read
  packages: write

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/server
  TF_VERSION: 1.5.7
  ANSIBLE_VERSION: 8.0.0

jobs:
  # Job de Build e Test da aplicação
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: meubanco
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        working-directory: ./server
        run: npm ci

      - name: Run TypeScript type check
        working-directory: ./server
        run: npx tsc --noEmit

      - name: Generate Prisma client
        working-directory: ./server
        run: npx prisma generate

      - name: Run database migrations
        working-directory: ./server
        env:
          DATABASE_URL: ${{ vars.DATABASE_URL }}
        run: npx prisma migrate deploy

      - name: Build application
        working-directory: ./server
        run: npm run build

      - name: Run tests (when available)
        working-directory: ./server
        run: npm test
        continue-on-error: true

      # Upload dos artefatos de build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: server/dist/

  # Job de análise de segurança e qualidade
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./server
        run: npm ci

      - name: Run security audit
        working-directory: ./server
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './server'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Job de build da imagem Docker
  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Job de validação do Terraform
  terraform-validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check -recursive

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Init TFLint
        working-directory: ./terraform
        run: tflint --init

      - name: Run TFLint
        working-directory: ./terraform
        run: tflint -f compact

  # Job de validação do Ansible
  ansible-validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          pip install ansible==${{ env.ANSIBLE_VERSION }}
          pip install ansible-lint

      - name: Validate Ansible syntax
        working-directory: ./ansible
        run: ansible-playbook --syntax-check playbook.yml

      - name: Run Ansible Lint
        working-directory: ./ansible
        run: ansible-lint playbook.yml
        continue-on-error: true

  # Job de Deploy (apenas para branch main)
  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build, terraform-validate, ansible-validate]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feat/initial_files_CI_CD') && github.event_name == 'push'
    environment: production

    outputs:
      public_ip: ${{ steps.ec2-ip.outputs.public_ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get existing EC2 Public IP
        id: ec2-ip
        run: |
          echo "🔍 Searching for existing EC2 instance..."

          # Busca instância EC2 existente com tag específica
          INSTANCE_DATA=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=EC2 DevOps Pos Graduacao" \
                    "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].{PublicIp:PublicIpAddress,InstanceId:InstanceId,State:State.Name}" \
            --output json)

          PUBLIC_IP=$(echo $INSTANCE_DATA | jq -r '.PublicIp // empty')
          INSTANCE_ID=$(echo $INSTANCE_DATA | jq -r '.InstanceId // empty')
          STATE=$(echo $INSTANCE_DATA | jq -r '.State // empty')

          if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" == "null" ]; then
            echo "❌ No running EC2 instance found with tag 'EC2 DevOps Pos Graduacao'"
            echo "💡 Please run the Infrastructure Management workflow first to create the EC2 instance"
            echo ""
            echo "Steps to create infrastructure:"
            echo "1. Go to Actions tab"
            echo "2. Select 'Infrastructure Management' workflow"
            echo "3. Click 'Run workflow'"
            echo "4. Choose 'create' action"
            echo "5. Run the workflow"
            exit 1
          fi

          echo "✅ Found running EC2 instance:"
          echo "   Instance ID: $INSTANCE_ID"
          echo "   Public IP: $PUBLIC_IP"
          echo "   State: $STATE"

          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Verify EC2 instance accessibility
        run: |
          echo "🔗 Testing connectivity to EC2 instance..."

          # Testa se a instância responde na porta 22 (SSH)
          if timeout 10 bash -c "cat < /dev/null > /dev/tcp/${{ steps.ec2-ip.outputs.public_ip }}/22"; then
            echo "✅ EC2 instance is accessible on SSH port 22"
          else
            echo "⚠️  EC2 instance may not be fully ready yet (SSH port not responding)"
            echo "   Continuing with deployment - Ansible will wait for readiness"
          fi

      - name: Setup Python for Ansible
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          pip install ansible==${{ env.ANSIBLE_VERSION }}
          pip install boto3 botocore

      - name: Update Ansible inventory with EC2 IP
        working-directory: ./ansible
        run: |
          # Atualiza o inventory com o IP da instância EC2
          sed -i "s/ansible_host=.*/ansible_host=${{ steps.ec2-ip.outputs.public_ip }}/" inventory.yml

      - name: Setup SSH key
        run: |
          # Cria diretório SSH
          mkdir -p ~/.ssh

          # Verifica se a chave SSH existe
          if [ -z "${{ secrets.EC2_SSH_PRIVATE_KEY }}" ]; then
            echo "❌ EC2_SSH_PRIVATE_KEY secret not found!"
            exit 1
          fi

          # Cria arquivo de chave privada
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa

          # Define permissões corretas
          chmod 600 ~/.ssh/id_rsa

          # Verifica se a chave foi criada corretamente
          if ! ssh-keygen -y -f ~/.ssh/id_rsa > /dev/null 2>&1; then
            echo "❌ Invalid SSH private key!"
            exit 1
          fi

          # Adiciona host às known_hosts
          ssh-keyscan -H ${{ steps.ec2-ip.outputs.public_ip }} >> ~/.ssh/known_hosts

          echo "✅ SSH key setup completed"

      - name: Wait for EC2 instance to be ready
        run: |
          echo "Waiting for EC2 instance to be ready..."
          for i in {1..30}; do
            if ssh -o ConnectTimeout=10 -i ~/.ssh/id_rsa ec2-user@${{ steps.ec2-ip.outputs.public_ip }} "echo 'Instance ready'"; then
              echo "Instance is ready!"
              break
            fi
            echo "Attempt $i failed, retrying in 30 seconds..."
            sleep 30
          done

      - name: Deploy with Ansible
        working-directory: ./ansible
        run: |
          ansible-playbook -i inventory.yml playbook.yml \
            --extra-vars "docker_image=${{ needs.docker-build.outputs.image-tag }}"

      - name: Verify deployment
        run: |
          echo "Checking if application is responding..."
          for i in {1..10}; do
            if curl -f http://${{ steps.ec2-ip.outputs.public_ip }}:2424/docs; then
              echo "Application is healthy!"
              break
            fi
            echo "Health check attempt $i failed, retrying in 30 seconds..."
            sleep 30
          done

  # Job de notificação
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "🚀 Application is available at: http://${{ needs.deploy.outputs.public_ip }}:2424/docs"
          else
            echo "❌ Deployment failed!"
          fi
