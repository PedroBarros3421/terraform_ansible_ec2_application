name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/server
  TF_VERSION: 1.5.7
  ANSIBLE_VERSION: 8.0.0

jobs:
  # Job de Build e Test da aplica√ß√£o
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        working-directory: ./server
        run: npm ci

      - name: Run TypeScript type check
        working-directory: ./server
        run: npx tsc --noEmit

      - name: Generate Prisma client
        working-directory: ./server
        run: npx prisma generate

      - name: Run database migrations
        working-directory: ./server
        run: npx prisma migrate deploy

      - name: Build application
        working-directory: ./server
        run: npm run build

      - name: Run tests (when available)
        working-directory: ./server
        run: npm test
        continue-on-error: true

      # Upload dos artefatos de build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: server/dist/

  # Job de an√°lise de seguran√ßa e qualidade
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./server
        run: npm ci

      - name: Run security audit
        working-directory: ./server
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './server'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Job de build da imagem Docker
  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Job de valida√ß√£o do Terraform
  terraform-validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check -recursive

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Init TFLint
        working-directory: ./terraform
        run: tflint --init

      - name: Run TFLint
        working-directory: ./terraform
        run: tflint -f compact

  # Job de valida√ß√£o do Ansible
  ansible-validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          pip install ansible==${{ env.ANSIBLE_VERSION }}
          pip install ansible-lint

      - name: Validate Ansible syntax
        working-directory: ./ansible
        run: ansible-playbook --syntax-check playbook.yml

      - name: Run Ansible Lint
        working-directory: ./ansible
        run: ansible-lint playbook.yml
        continue-on-error: true

  # Job de Deploy (apenas para branch main)
  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build, terraform-validate, ansible-validate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -var-file="terraform.tfvars" -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply tfplan

      - name: Get EC2 Public IP
        working-directory: ./terraform
        id: ec2-ip
        run: |
          echo "public_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT

      - name: Setup Python for Ansible
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          pip install ansible==${{ env.ANSIBLE_VERSION }}
          pip install boto3 botocore

      - name: Update Ansible inventory with EC2 IP
        working-directory: ./ansible
        run: |
          # Atualiza o inventory com o IP da inst√¢ncia EC2
          sed -i "s/ansible_host=.*/ansible_host=${{ steps.ec2-ip.outputs.public_ip }}/" inventory.yml

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.ec2-ip.outputs.public_ip }} >> ~/.ssh/known_hosts

      - name: Wait for EC2 instance to be ready
        run: |
          echo "Waiting for EC2 instance to be ready..."
          for i in {1..30}; do
            if ssh -o ConnectTimeout=10 -i ~/.ssh/id_rsa ec2-user@${{ steps.ec2-ip.outputs.public_ip }} "echo 'Instance ready'"; then
              echo "Instance is ready!"
              break
            fi
            echo "Attempt $i failed, retrying in 30 seconds..."
            sleep 30
          done

      - name: Deploy with Ansible
        working-directory: ./ansible
        run: |
          ansible-playbook -i inventory.yml playbook.yml \
            --extra-vars "docker_image=${{ needs.docker-build.outputs.image-tag }}"

      - name: Verify deployment
        run: |
          echo "Checking if application is responding..."
          for i in {1..10}; do
            if curl -f http://${{ steps.ec2-ip.outputs.public_ip }}:2424/docs; then
              echo "Application is healthy!"
              break
            fi
            echo "Health check attempt $i failed, retrying in 30 seconds..."
            sleep 30
          done

  # Job de notifica√ß√£o
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üöÄ Application is available at: http://${{ needs.deploy.outputs.public_ip }}:2424/docs"
          else
            echo "‚ùå Deployment failed!"
          fi
