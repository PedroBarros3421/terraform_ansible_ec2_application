name: Cleanup Resources

on:
  schedule:
    # Executa todos os domingos às 2:00 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      destroy_infrastructure:
        description: 'Destroy Terraform infrastructure'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: 1.5.7

jobs:
  cleanup-docker-images:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old Docker images
        run: |
          echo "🧹 Cleaning up old Docker images..."

          # Lista todas as versões da imagem
          PACKAGE_NAME="${{ github.repository }}/server"

          # Aqui você pode implementar lógica para manter apenas as últimas N versões
          echo "Package: $PACKAGE_NAME"
          echo "Note: Manual cleanup of old images can be done via GitHub Packages UI"

  cleanup-infrastructure:
    runs-on: ubuntu-latest
    if: github.event.inputs.destroy_infrastructure == 'true' || github.event_name == 'schedule'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Check for existing resources
        working-directory: ./terraform
        id: check-resources
        run: |
          if terraform show -json | jq -e '.values.root_module.resources | length > 0' > /dev/null 2>&1; then
            echo "has_resources=true" >> $GITHUB_OUTPUT
          else
            echo "has_resources=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Destroy infrastructure (scheduled cleanup)
        if: github.event_name == 'schedule' && steps.check-resources.outputs.has_resources == 'true'
        working-directory: ./terraform
        run: |
          echo "🗑️ Destroying infrastructure for scheduled cleanup..."
          terraform destroy -var-file="terraform.tfvars" -auto-approve

      - name: Destroy infrastructure (manual trigger)
        if: github.event.inputs.destroy_infrastructure == 'true'
        working-directory: ./terraform
        run: |
          echo "🗑️ Destroying infrastructure (manual trigger)..."
          terraform destroy -var-file="terraform.tfvars" -auto-approve

      - name: Cleanup notification
        if: steps.check-resources.outputs.has_resources == 'true'
        run: |
          echo "## 🧹 Cleanup Summary" >> $GITHUB_STEP_SUMMARY
          echo "Infrastructure resources have been cleaned up." >> $GITHUB_STEP_SUMMARY
          echo "Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "Time: $(date)" >> $GITHUB_STEP_SUMMARY
